<?xml version="1.0" encoding="UTF-8"?>
<issues format="5" by="lint 4.2.0-alpha06" client="gradle" variant="debug" version="4.2.0-alpha06">

    <issue
        id="RestrictedApi"
        message="SafeIterableMap can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            new SafeIterableMap&lt;>();"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="67"
            column="13"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.iteratorWithAdditions can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="150"
            column="36"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.putIfAbsent can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);"
        errorLine2="                                              ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="197"
            column="47"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.putIfAbsent can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);"
        errorLine2="                                              ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="226"
            column="47"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.remove can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ObserverWrapper removed = mObservers.remove(observer);"
        errorLine2="                                             ~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="245"
            column="46"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="ArchTaskExecutor can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);"
        errorLine2="        ~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="293"
            column="9"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="ArchTaskExecutor.postToMainThread can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);"
        errorLine2="                                       ~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="293"
            column="40"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.size can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        return mObservers.size() > 0;"
        errorLine2="                          ~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="363"
            column="27"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="ArchTaskExecutor can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        if (!ArchTaskExecutor.getInstance().isMainThread()) {"
        errorLine2="             ~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="486"
            column="14"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="ArchTaskExecutor.isMainThread can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        if (!ArchTaskExecutor.getInstance().isMainThread()) {"
        errorLine2="                                            ~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="486"
            column="45"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public LiveData(T value) {"
        errorLine2="                    ~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="102"
            column="21"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    protected void postValue(T value) {"
        errorLine2="                             ~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="284"
            column="30"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    protected void setValue(T value) {"
        errorLine2="                            ~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"
            line="305"
            column="29"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public MutableLiveData(T value) {"
        errorLine2="                           ~">
        <location
            file="src/main/java/androidx/lifecycle/MutableLiveData.java"
            line="32"
            column="28"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public void postValue(T value) {"
        errorLine2="                          ~">
        <location
            file="src/main/java/androidx/lifecycle/MutableLiveData.java"
            line="44"
            column="27"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public void setValue(T value) {"
        errorLine2="                         ~">
        <location
            file="src/main/java/androidx/lifecycle/MutableLiveData.java"
            line="49"
            column="26"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    void onChanged(T t);"
        errorLine2="                   ~">
        <location
            file="src/main/java/androidx/lifecycle/Observer.java"
            line="31"
            column="20"/>
    </issue>

</issues>
