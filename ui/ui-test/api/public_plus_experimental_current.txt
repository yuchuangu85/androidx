// Signature format: 3.0
package androidx.ui.test {

  public final class ActionsKt {
    method public static androidx.ui.test.SemanticsNodeInteraction performClick(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction performGesture(androidx.ui.test.SemanticsNodeInteraction, kotlin.jvm.functions.Function1<? super androidx.ui.test.GestureScope,kotlin.Unit> block);
    method public static androidx.ui.test.SemanticsNodeInteraction performScrollTo(androidx.ui.test.SemanticsNodeInteraction);
    method public static <T extends kotlin.Function<? extends java.lang.Boolean>> void performSemanticsAction(androidx.ui.test.SemanticsNodeInteraction, androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<T>> key, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> invocation);
    method public static void performSemanticsAction(androidx.ui.test.SemanticsNodeInteraction, androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.semantics.AccessibilityAction<kotlin.jvm.functions.Function0<java.lang.Boolean>>> key);
  }

  public final class AndroidAssertionsKt {
  }

  public final class AndroidBaseInputDispatcherKt {
  }

  public final class AndroidBitmapHelpersKt {
    method public static android.graphics.Bitmap assertContainsColor-VZNGtkI(android.graphics.Bitmap, long expectedColor);
    method public static void assertPixelColor-eWrXCG0(android.graphics.Bitmap, long expected, int x, int y, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.Color,java.lang.String> error = { color -> return "Pixel(" + x + ", " + y + ") expected to be " + expected + ", but was " + color });
    method public static void assertPixels-mvPU1zk(android.graphics.Bitmap, androidx.compose.ui.unit.IntSize? expectedSize = null, kotlin.jvm.functions.Function1<? super androidx.compose.ui.unit.IntOffset,androidx.compose.ui.graphics.Color> expectedColorProvider);
    method public static void assertShape-LBqplUo(android.graphics.Bitmap, androidx.compose.ui.unit.Density density, androidx.compose.ui.graphics.Shape shape, long shapeColor, long backgroundColor, androidx.compose.ui.graphics.Shape backgroundShape = androidx.compose.ui.graphics.RectangleShapeKt.RectangleShape, float sizeX = width.toFloat(), float sizeY = height.toFloat(), float shapeSizeX = sizeX, float shapeSizeY = sizeY, float centerX = width / 2.0, float centerY = height / 2.0, float shapeOverlapPixelCount = 1.0f);
    method public static void assertShape-WOPiG5A(android.graphics.Bitmap, androidx.compose.ui.unit.Density density, float horizontalPadding, float verticalPadding, long backgroundColor, long shapeColor, androidx.compose.ui.graphics.Shape shape = androidx.compose.ui.graphics.RectangleShapeKt.RectangleShape, float shapeOverlapPixelCount = 1.0f);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public static android.graphics.Bitmap captureToBitmap(androidx.ui.test.SemanticsNodeInteraction);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public static android.graphics.Bitmap captureToBitmap(android.view.View);
    method public static boolean contains-ej0GBII(androidx.compose.ui.graphics.Path, long offset);
  }

  public final class AndroidOutputKt {
  }

  public final class AndroidSemanticsNodeInteractionKt {
  }

  public final class AndroidSynchronizationKt {
  }

  public final class AnimationClockTestRule implements org.junit.rules.TestRule {
    ctor public AnimationClockTestRule();
    method public void advanceClock(long milliseconds);
    method public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description? description);
    method public androidx.ui.test.TestAnimationClock getClock();
    method public boolean isPaused();
    method public void pauseClock();
    method public void resumeClock();
    property public final androidx.ui.test.TestAnimationClock clock;
    property public final boolean isPaused;
  }

  public final class AnimationClocksKt {
    method public static androidx.compose.animation.core.MonotonicFrameAnimationClock monotonicFrameAnimationClockOf(kotlin.coroutines.CoroutineContext coroutineContext, androidx.compose.runtime.dispatch.MonotonicFrameClock clock);
  }

  public final class AssertionsKt {
    method public static androidx.ui.test.SemanticsNodeInteraction assert(androidx.ui.test.SemanticsNodeInteraction, androidx.ui.test.SemanticsMatcher matcher, kotlin.jvm.functions.Function0<java.lang.String>? messagePrefixOnError = null);
    method public static androidx.ui.test.SemanticsNodeInteractionCollection assertAll(androidx.ui.test.SemanticsNodeInteractionCollection, androidx.ui.test.SemanticsMatcher matcher);
    method public static androidx.ui.test.SemanticsNodeInteractionCollection assertAny(androidx.ui.test.SemanticsNodeInteractionCollection, androidx.ui.test.SemanticsMatcher matcher);
    method public static androidx.ui.test.SemanticsNodeInteractionCollection assertCountEquals(androidx.ui.test.SemanticsNodeInteractionCollection, int expectedSize);
    method public static androidx.ui.test.SemanticsNodeInteraction assertHasClickAction(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertHasNoClickAction(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsDisplayed(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsEnabled(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsHidden(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsInMutuallyExclusiveGroup(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsNotDisplayed(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsNotEnabled(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsNotHidden(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsNotSelected(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsOff(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsOn(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsSelectable(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsSelected(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertIsToggleable(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction assertLabelEquals(androidx.ui.test.SemanticsNodeInteraction, String value);
    method public static androidx.ui.test.SemanticsNodeInteraction assertRangeInfoEquals(androidx.ui.test.SemanticsNodeInteraction, androidx.compose.ui.semantics.AccessibilityRangeInfo value);
    method public static androidx.ui.test.SemanticsNodeInteraction assertTextEquals(androidx.ui.test.SemanticsNodeInteraction, String value);
    method public static androidx.ui.test.SemanticsNodeInteraction assertValueEquals(androidx.ui.test.SemanticsNodeInteraction, String value);
  }

  public final class BoundsAssertionsKt {
    method public static androidx.ui.test.SemanticsNodeInteraction assertHeightIsAtLeast-7iZCdLk(androidx.ui.test.SemanticsNodeInteraction, float expectedMinHeight);
    method public static androidx.ui.test.SemanticsNodeInteraction assertHeightIsEqualTo-7iZCdLk(androidx.ui.test.SemanticsNodeInteraction, float expectedHeight);
    method public static void assertIsEqualTo-nR2IGDg(float, float expected, String subject = "", float tolerance = null(0.5));
    method public static void assertIsNotEqualTo-nR2IGDg(float, float unexpected, String subject = "", float tolerance = null(0.5));
    method public static androidx.ui.test.SemanticsNodeInteraction assertLeftPositionInRootIsEqualTo-7iZCdLk(androidx.ui.test.SemanticsNodeInteraction, float expectedTop);
    method public static androidx.ui.test.SemanticsNodeInteraction assertPositionInRootIsEqualTo-cUvJKr8(androidx.ui.test.SemanticsNodeInteraction, float expectedLeft, float expectedTop);
    method public static androidx.ui.test.SemanticsNodeInteraction assertTopPositionInRootIsEqualTo-7iZCdLk(androidx.ui.test.SemanticsNodeInteraction, float expectedTop);
    method public static androidx.ui.test.SemanticsNodeInteraction assertWidthIsAtLeast-7iZCdLk(androidx.ui.test.SemanticsNodeInteraction, float expectedMinWidth);
    method public static androidx.ui.test.SemanticsNodeInteraction assertWidthIsEqualTo-7iZCdLk(androidx.ui.test.SemanticsNodeInteraction, float expectedWidth);
    method public static float getAlignmentLinePosition(androidx.ui.test.SemanticsNodeInteraction, androidx.compose.ui.AlignmentLine line);
    method public static androidx.compose.ui.unit.Bounds getUnclippedBoundsInRoot(androidx.ui.test.SemanticsNodeInteraction);
  }

  public interface ComposeTestRule extends org.junit.rules.TestRule {
    method public androidx.ui.test.AnimationClockTestRule getClockTestRule();
    method public androidx.compose.ui.unit.Density getDensity();
    method public android.util.DisplayMetrics getDisplayMetrics();
    method public void setContent(kotlin.jvm.functions.Function0<kotlin.Unit> composable);
    property public abstract androidx.ui.test.AnimationClockTestRule clockTestRule;
    property public abstract androidx.compose.ui.unit.Density density;
    property public abstract android.util.DisplayMetrics displayMetrics;
  }

  public final class ComposeTestRuleKt {
    method public static androidx.ui.test.ComposeTestRule createComposeRule(boolean disableTransitions = false, boolean disableBlinkingCursor = true);
  }

  public final class CoroutineBuildersKt {
    method public static <R> void runBlockingWithManualClock(boolean compatibleWithManualAnimationClock = false, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super androidx.compose.animation.core.ManualFrameClock,? super kotlin.coroutines.Continuation<? super R>,?> block);
  }

  public final class DisableTransitions implements org.junit.rules.TestRule {
    ctor public DisableTransitions();
    method public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description? description);
  }

  public final class DisableTransitions.DisableTransitionsStatement extends org.junit.runners.model.Statement {
    ctor public DisableTransitions.DisableTransitionsStatement(org.junit.runners.model.Statement base);
    method public void evaluate();
  }

  public final class ErrorMessagesKt {
  }

  @kotlin.RequiresOptIn(message="This testing API is experimental and is likely to be changed or removed" + " entirely") public @interface ExperimentalTesting {
  }

  public final class FiltersKt {
    method public static androidx.ui.test.SemanticsMatcher hasAnyAncestor(androidx.ui.test.SemanticsMatcher matcher);
    method public static androidx.ui.test.SemanticsMatcher hasAnyChild(androidx.ui.test.SemanticsMatcher matcher);
    method public static androidx.ui.test.SemanticsMatcher hasAnyDescendant(androidx.ui.test.SemanticsMatcher matcher);
    method public static androidx.ui.test.SemanticsMatcher hasAnySibling(androidx.ui.test.SemanticsMatcher matcher);
    method public static androidx.ui.test.SemanticsMatcher hasClickAction();
    method public static androidx.ui.test.SemanticsMatcher hasImeAction(androidx.compose.ui.text.input.ImeAction actionType);
    method public static androidx.ui.test.SemanticsMatcher hasInputMethodsSupport();
    method public static androidx.ui.test.SemanticsMatcher hasLabel(String label, boolean ignoreCase = false);
    method public static androidx.ui.test.SemanticsMatcher hasNoClickAction();
    method public static androidx.ui.test.SemanticsMatcher hasNoScrollAction();
    method public static androidx.ui.test.SemanticsMatcher hasParent(androidx.ui.test.SemanticsMatcher matcher);
    method public static androidx.ui.test.SemanticsMatcher hasRangeInfo(androidx.compose.ui.semantics.AccessibilityRangeInfo rangeInfo);
    method public static androidx.ui.test.SemanticsMatcher hasScrollAction();
    method public static androidx.ui.test.SemanticsMatcher hasSubstring(String substring, boolean ignoreCase = false);
    method public static androidx.ui.test.SemanticsMatcher hasTestTag(String testTag);
    method public static androidx.ui.test.SemanticsMatcher hasText(String text, boolean ignoreCase = false);
    method public static androidx.ui.test.SemanticsMatcher hasValue(String value);
    method public static androidx.ui.test.SemanticsMatcher isDialog();
    method public static androidx.ui.test.SemanticsMatcher isEnabled();
    method public static androidx.ui.test.SemanticsMatcher isFocused();
    method public static androidx.ui.test.SemanticsMatcher isHidden();
    method public static androidx.ui.test.SemanticsMatcher isInMutuallyExclusiveGroup();
    method public static androidx.ui.test.SemanticsMatcher isNotEnabled();
    method public static androidx.ui.test.SemanticsMatcher isNotFocused();
    method public static androidx.ui.test.SemanticsMatcher isNotHidden();
    method public static androidx.ui.test.SemanticsMatcher isNotSelected();
    method public static androidx.ui.test.SemanticsMatcher isOff();
    method public static androidx.ui.test.SemanticsMatcher isOn();
    method public static androidx.ui.test.SemanticsMatcher isPopup();
    method public static androidx.ui.test.SemanticsMatcher isRoot();
    method public static androidx.ui.test.SemanticsMatcher isSelectable();
    method public static androidx.ui.test.SemanticsMatcher isSelected();
    method public static androidx.ui.test.SemanticsMatcher isToggleable();
  }

  public final class FindersKt {
    method public static androidx.ui.test.SemanticsNodeInteractionCollection onAllNodes(androidx.ui.test.SemanticsMatcher matcher, boolean useUnmergedTree = false);
    method public static androidx.ui.test.SemanticsNodeInteractionCollection onAllNodesWithLabel(String label, boolean ignoreCase = false, boolean useUnmergedTree = false);
    method public static androidx.ui.test.SemanticsNodeInteractionCollection onAllNodesWithTag(String testTag, boolean useUnmergedTree = false);
    method public static androidx.ui.test.SemanticsNodeInteractionCollection onAllNodesWithText(String text, boolean ignoreCase = false, boolean useUnmergedTree = false);
    method public static androidx.ui.test.SemanticsNodeInteraction onNode(androidx.ui.test.SemanticsMatcher matcher, boolean useUnmergedTree = false);
    method public static androidx.ui.test.SemanticsNodeInteraction onNodeWithLabel(String label, boolean ignoreCase = false, boolean useUnmergedTree = false);
    method public static androidx.ui.test.SemanticsNodeInteraction onNodeWithSubstring(String text, boolean ignoreCase = false, boolean useUnmergedTree = false);
    method public static androidx.ui.test.SemanticsNodeInteraction onNodeWithTag(String testTag, boolean useUnmergedTree = false);
    method public static androidx.ui.test.SemanticsNodeInteraction onNodeWithText(String text, boolean ignoreCase = false, boolean useUnmergedTree = false);
    method public static androidx.ui.test.SemanticsNodeInteraction onRoot(boolean useUnmergedTree = false);
  }

  public final class GestureScope {
    ctor public GestureScope(androidx.compose.ui.semantics.SemanticsNode node);
  }

  public final class GestureScopeKt {
    method public static void cancel(androidx.ui.test.GestureScope);
    method public static void click-7zpKyg8(androidx.ui.test.GestureScope, long position = center);
    method public static void doubleClick-FEK65Ao(androidx.ui.test.GestureScope, long position = center, androidx.compose.ui.unit.Duration delay = androidx.ui.test.GestureScopeKt.doubleClickDelay);
    method public static void down-7zpKyg8(androidx.ui.test.GestureScope, long position);
    method public static void down-Y-DztCk(androidx.ui.test.GestureScope, int pointerId, long position);
    method public static inline float getBottom(androidx.ui.test.GestureScope);
    method public static long getBottomCenter(androidx.ui.test.GestureScope);
    method public static long getBottomLeft(androidx.ui.test.GestureScope);
    method public static long getBottomRight(androidx.ui.test.GestureScope);
    method public static long getCenter(androidx.ui.test.GestureScope);
    method public static long getCenterLeft(androidx.ui.test.GestureScope);
    method public static long getCenterRight(androidx.ui.test.GestureScope);
    method public static inline float getCenterX(androidx.ui.test.GestureScope);
    method public static inline float getCenterY(androidx.ui.test.GestureScope);
    method public static inline int getHeight(androidx.ui.test.GestureScope);
    method public static inline float getLeft(androidx.ui.test.GestureScope);
    method public static inline float getRight(androidx.ui.test.GestureScope);
    method public static long getSize(androidx.ui.test.GestureScope);
    method public static inline float getTop(androidx.ui.test.GestureScope);
    method public static long getTopCenter(androidx.ui.test.GestureScope);
    method public static long getTopLeft(androidx.ui.test.GestureScope);
    method public static long getTopRight(androidx.ui.test.GestureScope);
    method public static inline int getWidth(androidx.ui.test.GestureScope);
    method public static long localToGlobal-7zpKyg8(androidx.ui.test.GestureScope, long position);
    method public static void longClick-FEK65Ao(androidx.ui.test.GestureScope, long position = center, androidx.compose.ui.unit.Duration duration = androidx.compose.ui.gesture.ConstantsKt.LongPressTimeout + 100.milliseconds);
    method public static void move(androidx.ui.test.GestureScope);
    method public static void moveBy-7zpKyg8(androidx.ui.test.GestureScope, long delta);
    method public static void moveBy-Y-DztCk(androidx.ui.test.GestureScope, int pointerId, long delta);
    method public static void movePointerBy-Y-DztCk(androidx.ui.test.GestureScope, int pointerId, long delta);
    method public static void movePointerTo-Y-DztCk(androidx.ui.test.GestureScope, int pointerId, long position);
    method public static void moveTo-7zpKyg8(androidx.ui.test.GestureScope, long position);
    method public static void moveTo-Y-DztCk(androidx.ui.test.GestureScope, int pointerId, long position);
    method public static long percentOffset(androidx.ui.test.GestureScope, @FloatRange(from=-1.0, to=1.0) float x = 0f, @FloatRange(from=-1.0, to=1.0) float y = 0f);
    method public static void pinch-LifKLvY(androidx.ui.test.GestureScope, long start0, long end0, long start1, long end1, androidx.compose.ui.unit.Duration duration = 400.milliseconds);
    method public static void swipe-lXQwTZI(androidx.ui.test.GestureScope, long start, long end, androidx.compose.ui.unit.Duration duration = 200.milliseconds);
    method public static void swipeDown(androidx.ui.test.GestureScope);
    method public static void swipeLeft(androidx.ui.test.GestureScope);
    method public static void swipeRight(androidx.ui.test.GestureScope);
    method public static void swipeUp(androidx.ui.test.GestureScope);
    method public static void swipeWithVelocity-HxPTMKA(androidx.ui.test.GestureScope, long start, long end, @FloatRange(from=0.0, to=3.4E38) float endVelocity, androidx.compose.ui.unit.Duration duration = 200.milliseconds);
    method public static void up(androidx.ui.test.GestureScope, int pointerId = 0);
  }

  public final class KeyInputHelpersKt {
    method public static boolean performKeyPress(androidx.ui.test.SemanticsNodeInteraction, androidx.compose.ui.input.key.KeyEvent keyEvent);
  }

  public final class OutputKt {
    method public static void printToLog(androidx.ui.test.SemanticsNodeInteraction, String tag, @IntRange(from=0) int maxDepth = 2147483647);
    method public static void printToLog(androidx.ui.test.SemanticsNodeInteractionCollection, String tag, @IntRange(from=0) int maxDepth = 0);
    method public static String printToString(androidx.ui.test.SemanticsNodeInteraction, @IntRange(from=0) int maxDepth = 2147483647);
    method public static String printToString(androidx.ui.test.SemanticsNodeInteractionCollection, @IntRange(from=0) int maxDepth = 0);
  }

  public final class SelectionResult {
    ctor public SelectionResult(java.util.List<androidx.compose.ui.semantics.SemanticsNode> selectedNodes, String? customErrorOnNoMatch);
    method public String? getCustomErrorOnNoMatch();
    method public java.util.List<androidx.compose.ui.semantics.SemanticsNode> getSelectedNodes();
  }

  public final class SelectorsKt {
    method public static androidx.ui.test.SemanticsNodeInteractionCollection filter(androidx.ui.test.SemanticsNodeInteractionCollection, androidx.ui.test.SemanticsMatcher matcher);
    method public static androidx.ui.test.SemanticsNodeInteraction filterToOne(androidx.ui.test.SemanticsNodeInteractionCollection, androidx.ui.test.SemanticsMatcher matcher);
    method public static androidx.ui.test.SemanticsNodeInteractionCollection onAncestors(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction onChild(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction onChildAt(androidx.ui.test.SemanticsNodeInteraction, int index);
    method public static androidx.ui.test.SemanticsNodeInteractionCollection onChildren(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction onFirst(androidx.ui.test.SemanticsNodeInteractionCollection);
    method public static androidx.ui.test.SemanticsNodeInteraction onLast(androidx.ui.test.SemanticsNodeInteractionCollection);
    method public static androidx.ui.test.SemanticsNodeInteraction onParent(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteraction onSibling(androidx.ui.test.SemanticsNodeInteraction);
    method public static androidx.ui.test.SemanticsNodeInteractionCollection onSiblings(androidx.ui.test.SemanticsNodeInteraction);
  }

  public final class SemanticsMatcher {
    ctor public SemanticsMatcher(String description, kotlin.jvm.functions.Function1<? super androidx.compose.ui.semantics.SemanticsNode,java.lang.Boolean> matcher);
    method public infix androidx.ui.test.SemanticsMatcher and(androidx.ui.test.SemanticsMatcher other);
    method public String getDescription();
    method public boolean matches(androidx.compose.ui.semantics.SemanticsNode node);
    method public boolean matchesAny(Iterable<androidx.compose.ui.semantics.SemanticsNode> nodes);
    method public operator androidx.ui.test.SemanticsMatcher not();
    method public infix androidx.ui.test.SemanticsMatcher or(androidx.ui.test.SemanticsMatcher other);
    field public static final androidx.ui.test.SemanticsMatcher.Companion Companion;
  }

  public static final class SemanticsMatcher.Companion {
    method public <T> androidx.ui.test.SemanticsMatcher expectValue(androidx.compose.ui.semantics.SemanticsPropertyKey<T> key, T? expectedValue);
    method public <T> androidx.ui.test.SemanticsMatcher keyIsDefined(androidx.compose.ui.semantics.SemanticsPropertyKey<T> key);
    method public <T> androidx.ui.test.SemanticsMatcher keyNotDefined(androidx.compose.ui.semantics.SemanticsPropertyKey<T> key);
  }

  public final class SemanticsNodeInteraction {
    method public void assertDoesNotExist();
    method public androidx.ui.test.SemanticsNodeInteraction assertExists(String? errorMessageOnFail = null);
    method public androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(String? errorMessageOnFail = null);
  }

  public final class SemanticsNodeInteractionCollection {
    ctor public SemanticsNodeInteractionCollection(internal boolean useUnmergedTree, internal androidx.ui.test.SemanticsSelector selector);
    method public java.util.List<androidx.compose.ui.semantics.SemanticsNode> fetchSemanticsNodes(String? errorMessageOnFail = null);
    method public operator androidx.ui.test.SemanticsNodeInteraction get(int index);
  }

  public final class SemanticsNodeInteractionKt {
  }

  public final class SemanticsSelector {
    ctor public SemanticsSelector(String description, boolean requiresExactlyOneNode, androidx.ui.test.SemanticsSelector? chainedInputSelector, kotlin.jvm.functions.Function1<? super java.lang.Iterable<androidx.compose.ui.semantics.SemanticsNode>,androidx.ui.test.SelectionResult> selector);
    method public String getDescription();
    method public androidx.ui.test.SelectionResult map(Iterable<androidx.compose.ui.semantics.SemanticsNode> nodes, String errorOnFail);
  }

  public final class SemanticsSelectorKt {
  }

  public final class StateRestorationTester {
    ctor public StateRestorationTester(androidx.ui.test.ComposeTestRule composeTestRule);
    method public void emulateSavedInstanceStateRestore();
    method public void setContent(kotlin.jvm.functions.Function0<kotlin.Unit> composable);
  }

  public final class SynchronizationKt {
    method public static <T> T! runOnIdle(kotlin.jvm.functions.Function0<? extends T> action);
    method public static <T> T! runOnUiThread(kotlin.jvm.functions.Function0<? extends T> action);
    method public static void waitForIdle();
  }

  public interface TestAnimationClock extends androidx.compose.animation.core.AnimationClockObservable {
    method public void advanceClock(long milliseconds);
    method public boolean isIdle();
    method public boolean isPaused();
    method public void pauseClock();
    method public void resumeClock();
    property public abstract boolean isIdle;
    property public abstract boolean isPaused;
  }

  public final class TestUiDispatcher {
    method public kotlin.coroutines.CoroutineContext getMain();
    property public final kotlin.coroutines.CoroutineContext Main;
    field public static final androidx.ui.test.TestUiDispatcher INSTANCE;
  }

  public final class TextActionsKt {
    method public static void performImeAction(androidx.ui.test.SemanticsNodeInteraction, boolean alreadyHasFocus = false);
    method public static void performTextClearance(androidx.ui.test.SemanticsNodeInteraction, boolean alreadyHasFocus = false);
    method public static void performTextInput(androidx.ui.test.SemanticsNodeInteraction, String text, boolean alreadyHasFocus = false);
    method public static void performTextReplacement(androidx.ui.test.SemanticsNodeInteraction, String text, boolean alreadyHasFocus = false);
  }

  public final class UtilsKt {
  }

}

package androidx.ui.test.android {

  public final class AndroidComposeTestRule<T extends androidx.activity.ComponentActivity> implements androidx.ui.test.ComposeTestRule {
    ctor public AndroidComposeTestRule(androidx.test.ext.junit.rules.ActivityScenarioRule<T> activityRule, boolean disableTransitions, boolean disableBlinkingCursor);
    method public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description? description);
    method public androidx.test.ext.junit.rules.ActivityScenarioRule<T> getActivityRule();
    method public androidx.ui.test.AnimationClockTestRule getClockTestRule();
    method public androidx.compose.ui.unit.Density getDensity();
    method public android.util.DisplayMetrics getDisplayMetrics();
    method public void setContent(kotlin.jvm.functions.Function0<kotlin.Unit> composable);
    property public androidx.ui.test.AnimationClockTestRule clockTestRule;
    property public androidx.compose.ui.unit.Density density;
    property public android.util.DisplayMetrics displayMetrics;
  }

  public final class AndroidComposeTestRule.AndroidComposeStatement extends org.junit.runners.model.Statement {
    ctor public AndroidComposeTestRule.AndroidComposeStatement(org.junit.runners.model.Statement base);
    method public void evaluate();
  }

  public final class AndroidComposeTestRuleKt {
    method public static <T extends androidx.activity.ComponentActivity> androidx.ui.test.android.AndroidComposeTestRule<T> createAndroidComposeRule(Class<T> activityClass, boolean disableTransitions = false, boolean disableBlinkingCursor = true);
    method public static inline <reified T extends androidx.activity.ComponentActivity> androidx.ui.test.android.AndroidComposeTestRule<T>! createAndroidComposeRule(boolean disableTransitions = false, boolean disableBlinkingCursor = true);
  }

  public final class ComposeIdlingResourceKt {
    method public static void registerComposeWithEspresso();
    method public static void registerTestClock(androidx.ui.test.TestAnimationClock clock);
    method public static void unregisterComposeFromEspresso();
    method public static void unregisterTestClock(androidx.ui.test.TestAnimationClock clock);
  }

  public final class ComposeNotIdleException extends java.lang.Throwable {
    ctor public ComposeNotIdleException(String? message, Throwable? cause);
  }

  public final class WindowCaptureKt {
  }

}

