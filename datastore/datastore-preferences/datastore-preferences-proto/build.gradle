/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.anarres.gradle.plugin.jarjar.JarjarTask

import static androidx.build.dependencies.DependenciesKt.*
import androidx.build.LibraryGroups
import androidx.build.Publish


buildscript {
    dependencies {
        classpath 'org.anarres.jarjar:jarjar-gradle:1.0.1'
    }
}


plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    id("kotlin-android")
    id("com.google.protobuf")
}

apply plugin: 'org.anarres.jarjar'


dependencies {
    implementation(PROTOBUF_LITE)
    api(project(":datastore:datastore-core"))
}

protobuf {
    protoc {
        artifact = PROTOBUF_COMPILER
    }

    // Generates the java proto-lite code for the protos in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

android.libraryVariants.all { variant ->
    def variantName = variant.name
    def suffix = variantName.capitalize()
    def jarjarTask = tasks.register("jarjar${suffix}", JarjarTask) {
        destinationName "datastore-preferences-proto-${variantName}-jarjar.jar"
        dependsOn protoLiteJarWithoutProtoFiles
        from(files(protoLiteJarWithoutProtoFiles.archiveFile.get().getAsFile()))

        from files(variant.javaCompileProvider.get().destinationDir)
        dependsOn variant.javaCompileProvider.get()

        if (suffix == "Debug") {
            from(files(compileDebugKotlin.outputs.files))
        } else if (suffix == "Release") {
            from(files(compileReleaseKotlin.outputs.files))
        } else {
            throw IllegalStateException("Expected either debug or release variant.")
        }
        classRename 'com.google.protobuf.**', 'androidx.datastore.preferences.protobuf.@1'
    }

    def jarjarConf = configurations.register("jarjar${suffix}")
    artifacts.add("${jarjarConf.name}", jarjarTask.get().destinationPath) {
        name "datastore-preferences-proto-${variantName}-jarjar"
        type 'jar'
        builtBy jarjarTask
    }
}

// The proto-lite dependency includes .proto files, which are not used by icing. When apps depend on
// appsearch as well as proto-lite directly, these files conflict since jarjar only renames the java
// classes. Remove them here since they are unused.
tasks.register("protoLiteJarWithoutProtoFiles", Jar) {
    // Get proto lite jar as a file.
    def jarFile = configurations.detachedConfiguration(dependencies.create
            (PROTOBUF_LITE)).getSingleFile()

    // Expand the jar and remove any .proto files.
    from(zipTree(jarFile)) {
        exclude("**/*.proto")
    }


    into 'datastore-preferences-proto-lite-dep'
}

androidx {
    name = "Android Preferences DataStore Proto"
    publish = Publish.NONE
    mavenGroup = LibraryGroups.DATASTORE
    inceptionYear = "2020"
    description = "Jarjar the generated proto and proto-lite dependency for use by " +
            "datastore-preferences."
}
