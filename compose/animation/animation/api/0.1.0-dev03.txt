// Signature format: 3.0
package androidx.ui.animation {

  public final class AnimatedValueEffectsKt {
    ctor public AnimatedValueEffectsKt();
    method @CheckResult(suggest="+") public static androidx.compose.Effect<androidx.animation.AnimatedValue<androidx.ui.graphics.Color,androidx.animation.Vector4D>> animatedColor(androidx.ui.graphics.Color initVal);
    method @CheckResult(suggest="+") public static androidx.compose.Effect<androidx.animation.AnimatedFloat> animatedFloat(float initVal);
    method @CheckResult(suggest="+") public static <T, V extends androidx.animation.Vector> androidx.compose.Effect<androidx.animation.AnimatedValue<T,V>> animatedValue(T? initVal, androidx.animation.TwoWayConverter<T,V> converter);
  }

  public final class ColorPropKey implements androidx.animation.PropKey<androidx.ui.graphics.Color,androidx.animation.Vector4D> {
    ctor public ColorPropKey(androidx.ui.graphics.colorspace.ColorSpace colorSpace);
    ctor public ColorPropKey();
    method public androidx.animation.TypeConverter4D<androidx.ui.graphics.Color> getTypeConverter();
    property public androidx.animation.TypeConverter4D<androidx.ui.graphics.Color> typeConverter;
  }

  public final class CrossfadeKt {
    ctor public CrossfadeKt();
    method public static <T> void Crossfade(T? current, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> children);
  }

  public final class DpPropKey implements androidx.animation.PropKey<androidx.ui.core.Dp,androidx.animation.Vector1D> {
    ctor public DpPropKey();
    method public androidx.animation.TypeConverter1D<androidx.ui.core.Dp> getTypeConverter();
    property public androidx.animation.TypeConverter1D<androidx.ui.core.Dp> typeConverter;
  }

  public final class PropertyKeysKt {
    ctor public PropertyKeysKt();
    method public static kotlin.jvm.functions.Function1<androidx.ui.graphics.colorspace.ColorSpace,androidx.animation.TypeConverter4D<androidx.ui.graphics.Color>> getColorToVectorConverter();
    method public static androidx.animation.TypeConverter1D<androidx.ui.core.Dp> getDpToVectorConverter();
    method public static androidx.animation.TypeConverter2D<androidx.ui.core.PxPosition> getPxPositionToVectorConverter();
    method public static androidx.animation.TypeConverter1D<androidx.ui.core.Px> getPxToVectorConverter();
    method public static androidx.animation.TypeConverter4D<androidx.ui.engine.geometry.Rect> getRectToVectorConverter();
  }

  public final class PxPositionPropKey implements androidx.animation.PropKey<androidx.ui.core.PxPosition,androidx.animation.Vector2D> {
    ctor public PxPositionPropKey();
    method public androidx.animation.TypeConverter2D<androidx.ui.core.PxPosition> getTypeConverter();
    property public androidx.animation.TypeConverter2D<androidx.ui.core.PxPosition> typeConverter;
  }

  public final class PxPropKey implements androidx.animation.PropKey<androidx.ui.core.Px,androidx.animation.Vector1D> {
    ctor public PxPropKey();
    method public androidx.animation.TypeConverter1D<androidx.ui.core.Px> getTypeConverter();
    property public androidx.animation.TypeConverter1D<androidx.ui.core.Px> typeConverter;
  }

  public final class TransitionKt {
    ctor public TransitionKt();
    method public static <T> void Transition(androidx.animation.TransitionDefinition<T> definition, T? toState, androidx.animation.AnimationClockObservable clock = +ambient(AnimationClockAmbient), T? initState = toState, kotlin.jvm.functions.Function1<? super T,kotlin.Unit>? onStateChangeFinished = null, kotlin.jvm.functions.Function1<? super androidx.animation.TransitionState,kotlin.Unit> children);
    method public static boolean getTransitionsEnabled();
    method public static void setTransitionsEnabled(boolean p);
  }

}

