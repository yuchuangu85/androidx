// Signature format: 3.0
package androidx.ui.autofill {

  public interface Autofill {
    method public void cancelAutofillForNode(androidx.ui.autofill.AutofillNode autofillNode);
    method public void requestAutofillForNode(androidx.ui.autofill.AutofillNode autofillNode);
  }

  public final class AutofillNode {
    ctor public AutofillNode(java.util.List<? extends androidx.ui.autofill.AutofillType> autofillTypes, android.graphics.Rect? boundingBox, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit>? onFill);
    method public java.util.List<androidx.ui.autofill.AutofillType> component1();
    method public android.graphics.Rect? component2();
    method public kotlin.jvm.functions.Function1<java.lang.String,kotlin.Unit>? component3();
    method public androidx.ui.autofill.AutofillNode copy(java.util.List<? extends androidx.ui.autofill.AutofillType> autofillTypes, android.graphics.Rect? boundingBox, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit>? onFill);
    method public java.util.List<androidx.ui.autofill.AutofillType> getAutofillTypes();
    method public android.graphics.Rect? getBoundingBox();
    method public int getId();
    method public kotlin.jvm.functions.Function1<java.lang.String,kotlin.Unit>? getOnFill();
    method public void setBoundingBox(android.graphics.Rect? p);
    property public final int id;
  }

  public final class AutofillTree {
    ctor public AutofillTree();
    method public java.util.Map<java.lang.Integer,androidx.ui.autofill.AutofillNode> getChildren();
    method public kotlin.Unit? performAutofill(int id, String value);
    method public operator void plusAssign(androidx.ui.autofill.AutofillNode autofillNode);
    property public final java.util.Map<java.lang.Integer,androidx.ui.autofill.AutofillNode> children;
  }

  public enum AutofillType {
    method public static androidx.ui.autofill.AutofillType valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.ui.autofill.AutofillType[] values();
    enum_constant public static final androidx.ui.autofill.AutofillType EmailAddress;
    enum_constant public static final androidx.ui.autofill.AutofillType Name;
  }

}

package androidx.ui.core {

  public enum Alignment {
    method public final androidx.ui.unit.IntPxPosition align(androidx.ui.unit.IntPxSize size);
    method public static androidx.ui.core.Alignment valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.ui.core.Alignment[] values();
    enum_constant public static final androidx.ui.core.Alignment BottomCenter;
    enum_constant public static final androidx.ui.core.Alignment BottomLeft;
    enum_constant public static final androidx.ui.core.Alignment BottomRight;
    enum_constant public static final androidx.ui.core.Alignment Center;
    enum_constant public static final androidx.ui.core.Alignment CenterLeft;
    enum_constant public static final androidx.ui.core.Alignment CenterRight;
    enum_constant public static final androidx.ui.core.Alignment TopCenter;
    enum_constant public static final androidx.ui.core.Alignment TopLeft;
    enum_constant public static final androidx.ui.core.Alignment TopRight;
  }

  public abstract sealed class AlignmentLine {
    method public final boolean getHorizontal();
  }

  public final class AlignmentLineKt {
    method public static androidx.ui.unit.IntPx merge(androidx.ui.core.AlignmentLine, androidx.ui.unit.IntPx position1, androidx.ui.unit.IntPx position2);
  }

  @androidx.compose.Immutable public final class Constraints {
    ctor public Constraints(androidx.ui.unit.IntPx minWidth, androidx.ui.unit.IntPx maxWidth, androidx.ui.unit.IntPx minHeight, androidx.ui.unit.IntPx maxHeight);
    ctor public Constraints();
    method public androidx.ui.unit.IntPx component1();
    method public androidx.ui.unit.IntPx component2();
    method public androidx.ui.unit.IntPx component3();
    method public androidx.ui.unit.IntPx component4();
    method @androidx.compose.Immutable public androidx.ui.core.Constraints copy(androidx.ui.unit.IntPx minWidth, androidx.ui.unit.IntPx maxWidth, androidx.ui.unit.IntPx minHeight, androidx.ui.unit.IntPx maxHeight);
    method public androidx.ui.unit.IntPx getMaxHeight();
    method public androidx.ui.unit.IntPx getMaxWidth();
    method public androidx.ui.unit.IntPx getMinHeight();
    method public androidx.ui.unit.IntPx getMinWidth();
    field public static final androidx.ui.core.Constraints.Companion Companion;
  }

  public static final class Constraints.Companion {
    method public androidx.ui.core.Constraints fixed(androidx.ui.unit.IntPx width, androidx.ui.unit.IntPx height);
    method public androidx.ui.core.Constraints fixedHeight(androidx.ui.unit.IntPx height);
    method public androidx.ui.core.Constraints fixedWidth(androidx.ui.unit.IntPx width);
  }

  public final class ConstraintsKt {
    method public static androidx.ui.unit.IntPxSize constrain(androidx.ui.core.Constraints, androidx.ui.unit.IntPxSize size);
    method public static androidx.ui.core.Constraints enforce(androidx.ui.core.Constraints, androidx.ui.core.Constraints otherConstraints);
    method public static boolean getHasBoundedHeight(androidx.ui.core.Constraints);
    method public static boolean getHasBoundedWidth(androidx.ui.core.Constraints);
    method public static boolean getHasFixedHeight(androidx.ui.core.Constraints);
    method public static boolean getHasFixedWidth(androidx.ui.core.Constraints);
    method public static boolean isZero(androidx.ui.core.Constraints);
    method public static androidx.ui.core.Constraints offset(androidx.ui.core.Constraints, androidx.ui.unit.IntPx horizontal = 0.ipx, androidx.ui.unit.IntPx vertical = 0.ipx);
    method public static boolean satisfiedBy(androidx.ui.core.Constraints, androidx.ui.unit.IntPxSize size);
  }

  public final class ConsumedData {
    ctor public ConsumedData(androidx.ui.unit.PxPosition positionChange, boolean downChange);
    ctor public ConsumedData();
    method public androidx.ui.unit.PxPosition component1();
    method public boolean component2();
    method public androidx.ui.core.ConsumedData copy(androidx.ui.unit.PxPosition positionChange, boolean downChange);
    method public boolean getDownChange();
    method public androidx.ui.unit.PxPosition getPositionChange();
  }

  public enum Direction {
    method public static androidx.ui.core.Direction valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.ui.core.Direction[] values();
    enum_constant public static final androidx.ui.core.Direction DOWN;
    enum_constant public static final androidx.ui.core.Direction LEFT;
    enum_constant public static final androidx.ui.core.Direction RIGHT;
    enum_constant public static final androidx.ui.core.Direction UP;
  }

  public interface DrawModifier extends androidx.ui.core.Modifier.Element {
    method public void draw(androidx.ui.unit.Density density, kotlin.jvm.functions.Function0<kotlin.Unit> drawContent, androidx.ui.graphics.Canvas canvas, androidx.ui.unit.PxSize size);
  }

  public final class DrawModifierKt {
    method public static androidx.ui.core.DrawModifier draw(kotlin.jvm.functions.Function3<? super androidx.ui.unit.DensityScope,? super androidx.ui.graphics.Canvas,? super androidx.ui.unit.PxSize,kotlin.Unit> onDraw);
    method public static androidx.ui.core.DrawModifier drawWithContent(kotlin.jvm.functions.Function3<? super androidx.ui.core.DrawReceiver,? super androidx.ui.graphics.Canvas,? super androidx.ui.unit.PxSize,kotlin.Unit> onDraw);
  }

  public interface DrawReceiver extends androidx.ui.unit.DensityScope {
    method public void drawChildren();
  }

  public final class HorizontalAlignmentLine extends androidx.ui.core.AlignmentLine {
    ctor public HorizontalAlignmentLine(kotlin.jvm.functions.Function2<? super androidx.ui.unit.IntPx,? super androidx.ui.unit.IntPx,androidx.ui.unit.IntPx> merger);
  }

  public interface IntrinsicMeasurable {
    method public Object? getParentData();
    method public androidx.ui.unit.IntPx maxIntrinsicHeight(androidx.ui.unit.IntPx width);
    method public androidx.ui.unit.IntPx maxIntrinsicWidth(androidx.ui.unit.IntPx height);
    method public androidx.ui.unit.IntPx minIntrinsicHeight(androidx.ui.unit.IntPx width);
    method public androidx.ui.unit.IntPx minIntrinsicWidth(androidx.ui.unit.IntPx height);
    property public abstract Object? parentData;
  }

  public final class IntrinsicMeasurableKt {
  }

  public interface LayoutCoordinates {
    method public androidx.ui.unit.PxPosition childToLocal(androidx.ui.core.LayoutCoordinates child, androidx.ui.unit.PxPosition childLocal);
    method public androidx.ui.core.LayoutCoordinates? getParentCoordinates();
    method public androidx.ui.unit.PxPosition getPosition();
    method public java.util.Map<androidx.ui.core.AlignmentLine,androidx.ui.unit.IntPx> getProvidedAlignmentLines();
    method public androidx.ui.unit.PxSize getSize();
    method public androidx.ui.unit.PxPosition globalToLocal(androidx.ui.unit.PxPosition global);
    method public androidx.ui.unit.PxPosition localToGlobal(androidx.ui.unit.PxPosition local);
    method public androidx.ui.unit.PxPosition localToRoot(androidx.ui.unit.PxPosition local);
    property public abstract androidx.ui.core.LayoutCoordinates? parentCoordinates;
    property public abstract androidx.ui.unit.PxPosition position;
    property public abstract java.util.Map<androidx.ui.core.AlignmentLine,androidx.ui.unit.IntPx> providedAlignmentLines;
    property public abstract androidx.ui.unit.PxSize size;
  }

  public final class LayoutCoordinatesKt {
    method public static inline androidx.ui.unit.PxBounds getBoundsInRoot(androidx.ui.core.LayoutCoordinates);
    method public static inline androidx.ui.unit.PxBounds getGlobalBounds(androidx.ui.core.LayoutCoordinates);
    method public static inline androidx.ui.unit.PxPosition getGlobalPosition(androidx.ui.core.LayoutCoordinates);
    method public static inline androidx.ui.unit.PxPosition getPositionInRoot(androidx.ui.core.LayoutCoordinates);
  }

  public enum LayoutDirection {
    method public static androidx.ui.core.LayoutDirection valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.ui.core.LayoutDirection[] values();
    enum_constant public static final androidx.ui.core.LayoutDirection Ltr;
    enum_constant public static final androidx.ui.core.LayoutDirection Rtl;
  }

  public interface LayoutModifier extends androidx.ui.core.Modifier.Element {
    method public default androidx.ui.unit.IntPx maxIntrinsicHeightOf(androidx.ui.unit.DensityScope, androidx.ui.core.Measurable measurable, androidx.ui.unit.IntPx width);
    method public default androidx.ui.unit.IntPx maxIntrinsicWidthOf(androidx.ui.unit.DensityScope, androidx.ui.core.Measurable measurable, androidx.ui.unit.IntPx height);
    method public default androidx.ui.unit.IntPx minIntrinsicHeightOf(androidx.ui.unit.DensityScope, androidx.ui.core.Measurable measurable, androidx.ui.unit.IntPx width);
    method public default androidx.ui.unit.IntPx minIntrinsicWidthOf(androidx.ui.unit.DensityScope, androidx.ui.core.Measurable measurable, androidx.ui.unit.IntPx height);
    method public default androidx.ui.unit.IntPx? modifyAlignmentLine(androidx.ui.unit.DensityScope, androidx.ui.core.AlignmentLine line, androidx.ui.unit.IntPx? value);
    method public default androidx.ui.core.Constraints modifyConstraints(androidx.ui.unit.DensityScope, androidx.ui.core.Constraints constraints);
    method public default androidx.ui.unit.IntPxPosition modifyPosition(androidx.ui.unit.DensityScope, androidx.ui.unit.IntPxSize childSize, androidx.ui.unit.IntPxSize containerSize);
    method public default androidx.ui.unit.IntPxSize modifySize(androidx.ui.unit.DensityScope, androidx.ui.core.Constraints constraints, androidx.ui.unit.IntPxSize childSize);
  }

  public interface Measurable extends androidx.ui.core.IntrinsicMeasurable {
    method public androidx.ui.core.Placeable measure(androidx.ui.core.Constraints constraints);
  }

  public abstract class MeasureScope implements androidx.ui.unit.DensityScope {
    ctor public MeasureScope();
    method public final androidx.ui.core.MeasureScope.LayoutResult layout(androidx.ui.unit.IntPx width, androidx.ui.unit.IntPx height, java.util.Map<androidx.ui.core.AlignmentLine,androidx.ui.unit.IntPx> alignmentLines = emptyMap(), kotlin.jvm.functions.Function1<? super androidx.ui.core.Placeable.PlacementScope,kotlin.Unit> placementBlock);
  }

  public static interface MeasureScope.LayoutResult {
    method public java.util.Map<androidx.ui.core.AlignmentLine,androidx.ui.unit.IntPx> getAlignmentLines();
    method public androidx.ui.unit.IntPx getHeight();
    method public androidx.ui.unit.IntPx getWidth();
    method public void placeChildren(androidx.ui.core.Placeable.PlacementScope placementScope);
    property public abstract java.util.Map<androidx.ui.core.AlignmentLine,androidx.ui.unit.IntPx> alignmentLines;
    property public abstract androidx.ui.unit.IntPx height;
    property public abstract androidx.ui.unit.IntPx width;
  }

  public final class MeasureScopeKt {
  }

  @androidx.compose.Stable public interface Modifier {
    method public <R> R! foldIn(R? initial, kotlin.jvm.functions.Function2<? super R,? super androidx.ui.core.Modifier.Element,? extends R> operation);
    method public <R> R! foldOut(R? initial, kotlin.jvm.functions.Function2<? super androidx.ui.core.Modifier.Element,? super R,? extends R> operation);
    method public default operator androidx.ui.core.Modifier plus(androidx.ui.core.Modifier other);
    method @Deprecated public default infix androidx.ui.core.Modifier wraps(androidx.ui.core.Modifier other);
  }

  public static interface Modifier.Element extends androidx.ui.core.Modifier {
    method public default <R> R! foldIn(R? initial, kotlin.jvm.functions.Function2<? super R,? super androidx.ui.core.Modifier.Element,? extends R> operation);
    method public default <R> R! foldOut(R? initial, kotlin.jvm.functions.Function2<? super androidx.ui.core.Modifier.Element,? super R,? extends R> operation);
  }

  public static final class Modifier.None implements androidx.ui.core.Modifier {
    method public <R> R! foldIn(R? initial, kotlin.jvm.functions.Function2<? super R,? super androidx.ui.core.Modifier.Element,? extends R> operation);
    method public <R> R! foldOut(R? initial, kotlin.jvm.functions.Function2<? super androidx.ui.core.Modifier.Element,? super R,? extends R> operation);
    field public static final androidx.ui.core.Modifier.None INSTANCE;
  }

  public interface ParentDataModifier extends androidx.ui.core.Modifier.Element {
    method public default Object? modifyParentData(androidx.ui.unit.DensityScope, Object? parentData);
  }

  public abstract class Placeable {
    ctor public Placeable();
    method public abstract operator androidx.ui.unit.IntPx? get(androidx.ui.core.AlignmentLine line);
    method public final androidx.ui.unit.IntPx getHeight();
    method public abstract androidx.ui.unit.IntPxSize getSize();
    method public final androidx.ui.unit.IntPx getWidth();
    method protected abstract void performPlace(androidx.ui.unit.IntPxPosition position);
    property public final androidx.ui.unit.IntPx height;
    property public abstract androidx.ui.unit.IntPxSize size;
    property public final androidx.ui.unit.IntPx width;
    field public static final androidx.ui.core.Placeable.PlacementScope PlacementScope;
  }

  public static final class Placeable.PlacementScope {
    method public void place(androidx.ui.core.Placeable, androidx.ui.unit.IntPxPosition position);
    method public void place(androidx.ui.core.Placeable, androidx.ui.unit.PxPosition position);
    method public void place(androidx.ui.core.Placeable, androidx.ui.unit.IntPx x, androidx.ui.unit.IntPx y);
    method public void place(androidx.ui.core.Placeable, androidx.ui.unit.Px x, androidx.ui.unit.Px y);
  }

  public enum PointerEventPass {
    method public static androidx.ui.core.PointerEventPass valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.ui.core.PointerEventPass[] values();
    enum_constant public static final androidx.ui.core.PointerEventPass InitialDown;
    enum_constant public static final androidx.ui.core.PointerEventPass PostDown;
    enum_constant public static final androidx.ui.core.PointerEventPass PostUp;
    enum_constant public static final androidx.ui.core.PointerEventPass PreDown;
    enum_constant public static final androidx.ui.core.PointerEventPass PreUp;
  }

  public final class PointerId {
    ctor public PointerId(int id, androidx.ui.unit.Uptime creationTime);
    method public androidx.ui.core.PointerId copy(int id, androidx.ui.unit.Uptime creationTime);
  }

  public final class PointerInputChange {
    ctor public PointerInputChange(androidx.ui.core.PointerId id, androidx.ui.core.PointerInputData current, androidx.ui.core.PointerInputData previous, androidx.ui.core.ConsumedData consumed);
    method public androidx.ui.core.PointerId component1();
    method public androidx.ui.core.PointerInputData component2();
    method public androidx.ui.core.PointerInputData component3();
    method public androidx.ui.core.ConsumedData component4();
    method public androidx.ui.core.PointerInputChange copy(androidx.ui.core.PointerId id, androidx.ui.core.PointerInputData current, androidx.ui.core.PointerInputData previous, androidx.ui.core.ConsumedData consumed);
    method public androidx.ui.core.ConsumedData getConsumed();
    method public androidx.ui.core.PointerInputData getCurrent();
    method public androidx.ui.core.PointerId getId();
    method public androidx.ui.core.PointerInputData getPrevious();
  }

  public final class PointerInputData {
    ctor public PointerInputData(androidx.ui.unit.Uptime? uptime, androidx.ui.unit.PxPosition? position, boolean down);
    ctor public PointerInputData();
    method public androidx.ui.unit.Uptime? component1();
    method public androidx.ui.unit.PxPosition? component2();
    method public boolean component3();
    method public androidx.ui.core.PointerInputData copy(androidx.ui.unit.Uptime? uptime, androidx.ui.unit.PxPosition? position, boolean down);
    method public boolean getDown();
    method public androidx.ui.unit.PxPosition? getPosition();
    method public androidx.ui.unit.Uptime? getUptime();
  }

  public final class PointerInputKt {
    method public static boolean anyPositionChangeConsumed(androidx.ui.core.PointerInputChange);
    method public static boolean changedToDown(androidx.ui.core.PointerInputChange);
    method public static boolean changedToDownIgnoreConsumed(androidx.ui.core.PointerInputChange);
    method public static boolean changedToUp(androidx.ui.core.PointerInputChange);
    method public static boolean changedToUpIgnoreConsumed(androidx.ui.core.PointerInputChange);
    method public static androidx.ui.core.PointerInputChange consumeDownChange(androidx.ui.core.PointerInputChange);
    method public static androidx.ui.core.PointerInputChange consumePositionChange(androidx.ui.core.PointerInputChange, androidx.ui.unit.Px consumedDx, androidx.ui.unit.Px consumedDy);
    method public static androidx.ui.unit.PxPosition positionChange(androidx.ui.core.PointerInputChange);
    method public static androidx.ui.unit.PxPosition positionChangeIgnoreConsumed(androidx.ui.core.PointerInputChange);
    method public static boolean positionChanged(androidx.ui.core.PointerInputChange);
    method public static boolean positionChangedIgnoreConsumed(androidx.ui.core.PointerInputChange);
  }

  public final class VerticalAlignmentLine extends androidx.ui.core.AlignmentLine {
    ctor public VerticalAlignmentLine(kotlin.jvm.functions.Function2<? super androidx.ui.unit.IntPx,? super androidx.ui.unit.IntPx,androidx.ui.unit.IntPx> merger);
  }

}

package androidx.ui.focus {

  public enum FocusDetailedState {
    method public static androidx.ui.focus.FocusDetailedState valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.ui.focus.FocusDetailedState[] values();
    enum_constant public static final androidx.ui.focus.FocusDetailedState Active;
    enum_constant public static final androidx.ui.focus.FocusDetailedState ActiveParent;
    enum_constant public static final androidx.ui.focus.FocusDetailedState Captured;
    enum_constant public static final androidx.ui.focus.FocusDetailedState Disabled;
    enum_constant public static final androidx.ui.focus.FocusDetailedState Inactive;
  }

  public enum FocusState {
    method public static androidx.ui.focus.FocusState valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.ui.focus.FocusState[] values();
    enum_constant public static final androidx.ui.focus.FocusState Focused;
    enum_constant public static final androidx.ui.focus.FocusState NotFocusable;
    enum_constant public static final androidx.ui.focus.FocusState NotFocused;
  }

  public final class FocusStateKt {
    method public static androidx.ui.focus.FocusState focusState(androidx.ui.focus.FocusDetailedState);
  }

}

package androidx.ui.semantics {

  public final class AccessibilityAction<T extends kotlin.Function<? extends kotlin.Unit>> {
    ctor public AccessibilityAction(String? label, T action);
    method public String? component1();
    method public T component2();
    method public androidx.ui.semantics.AccessibilityAction<T> copy(String? label, T action);
    method public T getAction();
    method public String? getLabel();
  }

  public class SemanticsPropertyKey<T> implements kotlin.properties.ReadWriteProperty<androidx.ui.semantics.SemanticsPropertyReceiver,T> {
    ctor public SemanticsPropertyKey(String name);
    method public final String getName();
    method public final T! getValue(androidx.ui.semantics.SemanticsPropertyReceiver thisRef, kotlin.reflect.KProperty<?> property);
    method public T! merge(T? existingValue, T? newValue);
    method public final void setValue(androidx.ui.semantics.SemanticsPropertyReceiver thisRef, kotlin.reflect.KProperty<?> property, T? value);
  }

  public interface SemanticsPropertyReceiver {
    method public operator <T> void set(androidx.ui.semantics.SemanticsPropertyKey<T> key, T? value);
  }

}

package androidx.ui.testutils {

  public final class PointerInputTestUtilKt {
    method public static androidx.ui.core.PointerInputChange consume(androidx.ui.core.PointerInputChange, float dx = 0f, float dy = 0f, boolean downChange = false);
    method public static androidx.ui.core.PointerInputChange down(int id = 0, androidx.ui.unit.Duration duration = Duration.Zero, float x = 0f, float y = 0f);
    method public static androidx.ui.core.PointerInputChange invokeOverAllPasses(kotlin.jvm.functions.Function3<? super java.util.List<androidx.ui.core.PointerInputChange>,? super androidx.ui.core.PointerEventPass,? super androidx.ui.unit.IntPxSize,? extends java.util.List<androidx.ui.core.PointerInputChange>>, androidx.ui.core.PointerInputChange pointerInputChanges, androidx.ui.unit.IntPxSize size = IntPxSize(Int.MAX_VALUE.ipx, Int.MAX_VALUE.ipx));
    method public static java.util.List<androidx.ui.core.PointerInputChange> invokeOverAllPasses(kotlin.jvm.functions.Function3<? super java.util.List<androidx.ui.core.PointerInputChange>,? super androidx.ui.core.PointerEventPass,? super androidx.ui.unit.IntPxSize,? extends java.util.List<androidx.ui.core.PointerInputChange>>, androidx.ui.core.PointerInputChange![] pointerInputChanges, androidx.ui.unit.IntPxSize size = IntPxSize(Int.MAX_VALUE.ipx, Int.MAX_VALUE.ipx));
    method public static androidx.ui.core.PointerInputChange invokeOverPasses(kotlin.jvm.functions.Function3<? super java.util.List<androidx.ui.core.PointerInputChange>,? super androidx.ui.core.PointerEventPass,? super androidx.ui.unit.IntPxSize,? extends java.util.List<androidx.ui.core.PointerInputChange>>, androidx.ui.core.PointerInputChange pointerInputChange, androidx.ui.core.PointerEventPass pointerEventPass, androidx.ui.unit.IntPxSize size = IntPxSize(Int.MAX_VALUE.ipx, Int.MAX_VALUE.ipx));
    method public static java.util.List<androidx.ui.core.PointerInputChange> invokeOverPasses(kotlin.jvm.functions.Function3<? super java.util.List<androidx.ui.core.PointerInputChange>,? super androidx.ui.core.PointerEventPass,? super androidx.ui.unit.IntPxSize,? extends java.util.List<androidx.ui.core.PointerInputChange>>, androidx.ui.core.PointerInputChange![] pointerInputChanges, androidx.ui.core.PointerEventPass pointerEventPass, androidx.ui.unit.IntPxSize size = IntPxSize(Int.MAX_VALUE.ipx, Int.MAX_VALUE.ipx));
    method public static androidx.ui.core.PointerInputChange invokeOverPasses(kotlin.jvm.functions.Function3<? super java.util.List<androidx.ui.core.PointerInputChange>,? super androidx.ui.core.PointerEventPass,? super androidx.ui.unit.IntPxSize,? extends java.util.List<androidx.ui.core.PointerInputChange>>, androidx.ui.core.PointerInputChange pointerInputChange, androidx.ui.core.PointerEventPass![] pointerEventPasses, androidx.ui.unit.IntPxSize size = IntPxSize(Int.MAX_VALUE.ipx, Int.MAX_VALUE.ipx));
    method public static java.util.List<androidx.ui.core.PointerInputChange> invokeOverPasses(kotlin.jvm.functions.Function3<? super java.util.List<androidx.ui.core.PointerInputChange>,? super androidx.ui.core.PointerEventPass,? super androidx.ui.unit.IntPxSize,? extends java.util.List<androidx.ui.core.PointerInputChange>>, java.util.List<androidx.ui.core.PointerInputChange> pointerInputChanges, java.util.List<? extends androidx.ui.core.PointerEventPass> pointerEventPasses, androidx.ui.unit.IntPxSize size = IntPxSize(Int.MAX_VALUE.ipx, Int.MAX_VALUE.ipx));
    method public static androidx.ui.core.PointerInputChange moveBy(androidx.ui.core.PointerInputChange, androidx.ui.unit.Duration duration, float dx = 0f, float dy = 0f);
    method public static androidx.ui.core.PointerInputChange moveTo(androidx.ui.core.PointerInputChange, androidx.ui.unit.Duration duration, float x = 0f, float y = 0f);
    method public static androidx.ui.core.PointerInputChange up(androidx.ui.core.PointerInputChange, androidx.ui.unit.Duration duration);
  }

}

