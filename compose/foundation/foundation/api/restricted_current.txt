// Signature format: 3.0
package androidx.compose.foundation {

  public final class BackgroundKt {
    method public static androidx.compose.ui.Modifier background(androidx.compose.ui.Modifier, androidx.compose.ui.graphics.Brush brush, androidx.compose.ui.graphics.Shape shape = androidx.compose.ui.graphics.RectangleShapeKt.RectangleShape, @FloatRange(from=0.0, to=1.0) float alpha = 1.0f);
    method public static androidx.compose.ui.Modifier background-1xq40Q0(androidx.compose.ui.Modifier, long color, androidx.compose.ui.graphics.Shape shape = androidx.compose.ui.graphics.RectangleShapeKt.RectangleShape);
  }

  public final class BaseTextFieldKt {
    method @androidx.compose.foundation.ExperimentalFoundationApi @androidx.compose.runtime.Composable public static void BaseTextField-ngE-tqQ(androidx.compose.ui.text.input.TextFieldValue value, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.input.TextFieldValue,kotlin.Unit> onValueChange, androidx.compose.ui.Modifier modifier = Modifier, long textColor = Color.Unset, androidx.compose.ui.text.TextStyle textStyle = currentTextStyle(), androidx.compose.ui.text.input.KeyboardType keyboardType = KeyboardType.Text, androidx.compose.ui.text.input.ImeAction imeAction = ImeAction.Unspecified, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.input.ImeAction,kotlin.Unit> onImeActionPerformed = {}, androidx.compose.ui.text.input.VisualTransformation visualTransformation = VisualTransformation.None, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult,kotlin.Unit> onTextLayout = {}, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onTextInputStarted = {}, long cursorColor = contentColor());
    method public static void setBlinkingCursorEnabled(boolean p);
  }

  @Deprecated @androidx.compose.runtime.Immutable public final class Border {
    method @Deprecated public float component1();
    method @Deprecated public androidx.compose.ui.graphics.Brush component2();
    method @Deprecated @androidx.compose.runtime.Immutable public androidx.compose.foundation.Border copy-v_fYJzc(float size, androidx.compose.ui.graphics.Brush brush);
    method @Deprecated public androidx.compose.ui.graphics.Brush getBrush();
    method @Deprecated public float getSize();
  }

  public final class BorderKt {
    method public static androidx.compose.ui.Modifier border(androidx.compose.ui.Modifier, androidx.compose.foundation.BorderStroke border, androidx.compose.ui.graphics.Shape shape = androidx.compose.ui.graphics.RectangleShapeKt.RectangleShape);
    method public static androidx.compose.ui.Modifier border-bMj1UE0(androidx.compose.ui.Modifier, float width, androidx.compose.ui.graphics.Brush brush, androidx.compose.ui.graphics.Shape shape);
    method public static androidx.compose.ui.Modifier border-zRMYNwQ(androidx.compose.ui.Modifier, float width, long color, androidx.compose.ui.graphics.Shape shape = androidx.compose.ui.graphics.RectangleShapeKt.RectangleShape);
    method @Deprecated public static androidx.compose.ui.Modifier drawBorder(androidx.compose.ui.Modifier, androidx.compose.foundation.Border border, androidx.compose.ui.graphics.Shape shape = androidx.compose.ui.graphics.RectangleShapeKt.RectangleShape);
    method @Deprecated public static androidx.compose.ui.Modifier drawBorder-bMj1UE0(androidx.compose.ui.Modifier, float size, androidx.compose.ui.graphics.Brush brush, androidx.compose.ui.graphics.Shape shape);
    method @Deprecated public static androidx.compose.ui.Modifier drawBorder-zRMYNwQ(androidx.compose.ui.Modifier, float size, long color, androidx.compose.ui.graphics.Shape shape = androidx.compose.ui.graphics.RectangleShapeKt.RectangleShape);
  }

  @androidx.compose.runtime.Immutable public final class BorderStroke {
    method public float component1();
    method public androidx.compose.ui.graphics.Brush component2();
    method @androidx.compose.runtime.Immutable public androidx.compose.foundation.BorderStroke copy-v_fYJzc(float width, androidx.compose.ui.graphics.Brush brush);
    method public androidx.compose.ui.graphics.Brush getBrush();
    method public float getWidth();
  }

  public final class BorderStrokeKt {
    method @Deprecated @androidx.compose.runtime.Stable public static androidx.compose.foundation.Border Border-Qek64HU(float size, long color);
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.BorderStroke BorderStroke-Qek64HU(float width, long color);
  }

  public final class BoxKt {
    method @androidx.compose.runtime.Composable public static void Box-0SX22z8(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.graphics.Shape shape = androidx.compose.ui.graphics.RectangleShapeKt.RectangleShape, long backgroundColor = Color.Transparent, androidx.compose.foundation.BorderStroke? border = null, float padding = elvis {
    var var8dc48da0: androidx.compose.ui.unit.Dp = border?.width
    if (var8dc48da0 != null) var8dc48da0 else 0.dp
}, float paddingStart = Dp.Unspecified, float paddingTop = Dp.Unspecified, float paddingEnd = Dp.Unspecified, float paddingBottom = Dp.Unspecified, androidx.compose.ui.Alignment gravity = ContentGravity.TopStart, kotlin.jvm.functions.Function0<kotlin.Unit> children = emptyContent());
  }

  public final class CanvasKt {
    method @androidx.compose.runtime.Composable public static void Canvas(androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.graphics.drawscope.DrawScope,kotlin.Unit> onDraw);
  }

  public final class ClickableKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.Modifier clickable(androidx.compose.ui.Modifier, boolean enabled = true, String? onClickLabel = null, androidx.compose.foundation.InteractionState interactionState = remember({ 
    return <init>()
}), androidx.compose.foundation.Indication? indication = IndicationAmbient.invoke(), kotlin.jvm.functions.Function0<kotlin.Unit>? onLongClick = null, kotlin.jvm.functions.Function0<kotlin.Unit>? onDoubleClick = null, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
  }

  public final class ClickableTextKt {
    method @androidx.compose.runtime.Composable public static void ClickableText(androidx.compose.ui.text.AnnotatedString text, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.text.TextStyle style = TextStyle.Default, boolean softWrap = true, androidx.compose.ui.text.style.TextOverflow overflow = TextOverflow.Clip, int maxLines = 2147483647, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult,kotlin.Unit> onTextLayout = {}, kotlin.jvm.functions.Function1<? super java.lang.Integer,kotlin.Unit> onClick);
  }

  public final class ContentColorKt {
    method @androidx.compose.runtime.Composable public static long contentColor();
    method public static androidx.compose.runtime.ProvidableAmbient<androidx.compose.ui.graphics.Color> getContentColorAmbient();
  }

  public final class DarkThemeKt {
    method @androidx.compose.runtime.Composable public static boolean isSystemInDarkTheme();
  }

  @kotlin.RequiresOptIn(message="This foundation API is experimental and is likely to change or be removed in the " + "future.") public @interface ExperimentalFoundationApi {
  }

  public final class IconKt {
    method @androidx.compose.runtime.Composable public static void Icon-1eoVtfs(androidx.compose.ui.graphics.painter.Painter painter, androidx.compose.ui.Modifier modifier = Modifier, long tint = contentColor());
    method @androidx.compose.runtime.Composable public static void Icon-QSAJrGw(androidx.compose.ui.graphics.vector.VectorAsset asset, androidx.compose.ui.Modifier modifier = Modifier, long tint = contentColor());
    method @androidx.compose.runtime.Composable public static void Icon-uUQrhdE(androidx.compose.ui.graphics.ImageAsset asset, androidx.compose.ui.Modifier modifier = Modifier, long tint = contentColor());
  }

  public final class ImageKt {
    method @androidx.compose.runtime.Composable public static inline void Image(androidx.compose.ui.graphics.ImageAsset asset, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.Alignment alignment = Alignment.Center, androidx.compose.ui.layout.ContentScale contentScale = ContentScale.Fit, float alpha = 1.0f, androidx.compose.ui.graphics.ColorFilter? colorFilter = null);
    method @androidx.compose.runtime.Composable public static inline void Image(androidx.compose.ui.graphics.vector.VectorAsset asset, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.Alignment alignment = Alignment.Center, androidx.compose.ui.layout.ContentScale contentScale = ContentScale.Fit, float alpha = 1.0f, androidx.compose.ui.graphics.ColorFilter? colorFilter = null);
    method @androidx.compose.runtime.Composable public static void Image(androidx.compose.ui.graphics.painter.Painter painter, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.Alignment alignment = Alignment.Center, androidx.compose.ui.layout.ContentScale contentScale = ContentScale.Fit, float alpha = 1.0f, androidx.compose.ui.graphics.ColorFilter? colorFilter = null);
  }

  @androidx.compose.runtime.Stable public interface Indication {
    method public androidx.compose.foundation.IndicationInstance createInstance();
  }

  public interface IndicationInstance {
    method public void drawIndication(androidx.compose.ui.ContentDrawScope, androidx.compose.foundation.InteractionState interactionState);
    method public default void onDispose();
  }

  public final class IndicationKt {
    method public static androidx.compose.runtime.ProvidableAmbient<kotlin.jvm.functions.Function0<androidx.compose.foundation.Indication>> getIndicationAmbient();
    method public static androidx.compose.ui.Modifier indication(androidx.compose.ui.Modifier, androidx.compose.foundation.InteractionState interactionState, androidx.compose.foundation.Indication? indication = null);
  }

  public interface Interaction {
  }

  public static final class Interaction.Dragged implements androidx.compose.foundation.Interaction {
    field public static final androidx.compose.foundation.Interaction.Dragged INSTANCE;
  }

  public static final class Interaction.Pressed implements androidx.compose.foundation.Interaction {
    field public static final androidx.compose.foundation.Interaction.Pressed INSTANCE;
  }

  @androidx.compose.runtime.Stable public final class InteractionState implements androidx.compose.runtime.State<java.util.Set<? extends androidx.compose.foundation.Interaction>> {
    ctor public InteractionState();
    method public void addInteraction-Jgxim6Q(androidx.compose.foundation.Interaction interaction, androidx.compose.ui.geometry.Offset? position = null);
    method public operator boolean contains(androidx.compose.foundation.Interaction interaction);
    method public java.util.Set<androidx.compose.foundation.Interaction> getValue();
    method public androidx.compose.ui.geometry.Offset? interactionPositionFor(androidx.compose.foundation.Interaction interaction);
    method public void removeInteraction(androidx.compose.foundation.Interaction interaction);
    property public java.util.Set<androidx.compose.foundation.Interaction> value;
  }

  @kotlin.RequiresOptIn(message="This API is internal to library.") @kotlin.annotation.Target(allowedTargets={AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER}) public @interface InternalFoundationApi {
  }

  public final class ProgressSemanticsKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier progressSemantics(androidx.compose.ui.Modifier, @FloatRange(from=0.0, to=1.0) float progress);
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier progressSemantics(androidx.compose.ui.Modifier);
  }

  public final class ScrollKt {
    method @androidx.compose.runtime.Composable public static void ScrollableColumn(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.ScrollState scrollState = rememberScrollState(0.0), androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement = Arrangement.Top, androidx.compose.ui.Alignment.Horizontal horizontalAlignment = Alignment.Start, boolean reverseScrollDirection = false, boolean isScrollEnabled = true, androidx.compose.foundation.layout.PaddingValues contentPadding = androidx.compose.foundation.layout.PaddingValues(0.dp), kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> children);
    method @androidx.compose.runtime.Composable public static void ScrollableRow(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.ScrollState scrollState = rememberScrollState(0.0), androidx.compose.foundation.layout.Arrangement.Horizontal horizontalArrangement = Arrangement.Start, androidx.compose.ui.Alignment.Vertical verticalAlignment = Alignment.Top, boolean reverseScrollDirection = false, boolean isScrollEnabled = true, androidx.compose.foundation.layout.PaddingValues contentPadding = androidx.compose.foundation.layout.PaddingValues(0.dp), kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> children);
    method public static androidx.compose.ui.Modifier horizontalScroll(androidx.compose.ui.Modifier, androidx.compose.foundation.ScrollState state, boolean enabled = true, boolean reverseScrolling = false);
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.ScrollState rememberScrollState(float initial = 0f);
    method public static androidx.compose.ui.Modifier verticalScroll(androidx.compose.ui.Modifier, androidx.compose.foundation.ScrollState state, boolean enabled = true, boolean reverseScrolling = false);
  }

  @androidx.compose.runtime.Stable public final class ScrollState {
    ctor public ScrollState(float initial, internal androidx.compose.foundation.animation.FlingConfig flingConfig, androidx.compose.animation.core.AnimationClockObservable animationClock);
    method public float getMaxValue();
    method public float getValue();
    method public boolean isAnimationRunning();
    method public void scrollBy(float value);
    method public void scrollTo(float value);
    method public void smoothScrollBy(float value, androidx.compose.animation.core.AnimationSpec<java.lang.Float> spec = androidx.compose.animation.core.SpringSpec(), kotlin.jvm.functions.Function2<? super androidx.compose.animation.core.AnimationEndReason,? super java.lang.Float,kotlin.Unit> onEnd = { _, _ ->  });
    method public void smoothScrollTo(float value, androidx.compose.animation.core.AnimationSpec<java.lang.Float> spec = androidx.compose.animation.core.SpringSpec(), kotlin.jvm.functions.Function2<? super androidx.compose.animation.core.AnimationEndReason,? super java.lang.Float,kotlin.Unit> onEnd = { _, _ ->  });
    method public void stopAnimation();
    property public final boolean isAnimationRunning;
    property public final float maxValue;
    property public final float value;
    field public static final androidx.compose.foundation.ScrollState.Companion Companion;
  }

  public static final class ScrollState.Companion {
    method public androidx.compose.runtime.savedinstancestate.Saver<androidx.compose.foundation.ScrollState,?> Saver(androidx.compose.foundation.animation.FlingConfig flingConfig, androidx.compose.animation.core.AnimationClockObservable animationClock);
  }

  public final class Strings {
    method public String getChecked();
    method public String getInProgress();
    method public String getIndeterminate();
    method public String getNotSelected();
    method public String getSelected();
    method public String getTemplatePercent();
    method public String getUnchecked();
    property public final String Checked;
    property public final String InProgress;
    property public final String Indeterminate;
    property public final String NotSelected;
    property public final String Selected;
    property public final String TemplatePercent;
    property public final String Unchecked;
    field public static final androidx.compose.foundation.Strings INSTANCE;
  }

  public final class TextKt {
    method @androidx.compose.runtime.Composable public static void ProvideTextStyle(androidx.compose.ui.text.TextStyle value, kotlin.jvm.functions.Function0<kotlin.Unit> children);
    method @androidx.compose.runtime.Composable public static void Text-TPAwlIA(androidx.compose.ui.text.AnnotatedString text, androidx.compose.ui.Modifier modifier = Modifier, long color = Color.Unset, long fontSize = TextUnit.Inherit, androidx.compose.ui.text.font.FontStyle? fontStyle = null, androidx.compose.ui.text.font.FontWeight? fontWeight = null, androidx.compose.ui.text.font.FontFamily? fontFamily = null, long letterSpacing = TextUnit.Inherit, androidx.compose.ui.text.style.TextDecoration? textDecoration = null, androidx.compose.ui.text.style.TextAlign? textAlign = null, long lineHeight = TextUnit.Inherit, androidx.compose.ui.text.style.TextOverflow overflow = TextOverflow.Clip, boolean softWrap = true, int maxLines = 2147483647, java.util.Map<java.lang.String,androidx.compose.foundation.text.InlineTextContent> inlineContent = mapOf(), kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult,kotlin.Unit> onTextLayout = {}, androidx.compose.ui.text.TextStyle style = currentTextStyle());
    method @androidx.compose.runtime.Composable public static void Text-Vp_773c(String text, androidx.compose.ui.Modifier modifier = Modifier, long color = Color.Unset, long fontSize = TextUnit.Inherit, androidx.compose.ui.text.font.FontStyle? fontStyle = null, androidx.compose.ui.text.font.FontWeight? fontWeight = null, androidx.compose.ui.text.font.FontFamily? fontFamily = null, long letterSpacing = TextUnit.Inherit, androidx.compose.ui.text.style.TextDecoration? textDecoration = null, androidx.compose.ui.text.style.TextAlign? textAlign = null, long lineHeight = TextUnit.Inherit, androidx.compose.ui.text.style.TextOverflow overflow = TextOverflow.Clip, boolean softWrap = true, int maxLines = 2147483647, java.util.Map<java.lang.String,androidx.compose.foundation.text.InlineTextContent> inlineContent = mapOf(), kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult,kotlin.Unit> onTextLayout = {}, androidx.compose.ui.text.TextStyle style = currentTextStyle());
    method @androidx.compose.runtime.Composable @androidx.compose.runtime.ComposableContract(readonly=true) public static androidx.compose.ui.text.TextStyle currentTextStyle();
  }

}

package androidx.compose.foundation.animation {

  public final class AndroidFlingCalculatorKt {
  }

  public final class AndroidFlingConfigKt {
  }

  public final class AndroidFlingDecaySpec implements androidx.compose.animation.core.FloatDecayAnimationSpec {
    ctor public AndroidFlingDecaySpec(androidx.compose.ui.unit.Density density);
    method public float getAbsVelocityThreshold();
    method public long getDurationMillis(float start, float startVelocity);
    method public float getTarget(float start, float startVelocity);
    method public float getValue(long playTime, float start, float startVelocity);
    method public float getVelocity(long playTime, float start, float startVelocity);
    property public float absVelocityThreshold;
  }

  public final class AndroidFlingSplineKt {
  }

  @androidx.compose.runtime.Immutable public final class FlingConfig {
    ctor public FlingConfig(androidx.compose.animation.core.FloatDecayAnimationSpec decayAnimation, kotlin.jvm.functions.Function1<? super java.lang.Float,androidx.compose.animation.core.TargetAnimation> adjustTarget);
    method public androidx.compose.animation.core.FloatDecayAnimationSpec component1();
    method public kotlin.jvm.functions.Function1<java.lang.Float,androidx.compose.animation.core.TargetAnimation> component2();
    method @androidx.compose.runtime.Immutable public androidx.compose.foundation.animation.FlingConfig copy(androidx.compose.animation.core.FloatDecayAnimationSpec decayAnimation, kotlin.jvm.functions.Function1<? super java.lang.Float,androidx.compose.animation.core.TargetAnimation> adjustTarget);
    method public kotlin.jvm.functions.Function1<java.lang.Float,androidx.compose.animation.core.TargetAnimation> getAdjustTarget();
    method public androidx.compose.animation.core.FloatDecayAnimationSpec getDecayAnimation();
  }

  public final class FlingConfigKt {
    method public static androidx.compose.foundation.animation.FlingConfig FlingConfig(java.util.List<java.lang.Float> anchors, androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec = androidx.compose.animation.core.SpringSpec(), androidx.compose.animation.core.FloatDecayAnimationSpec decayAnimation = androidx.compose.animation.core.ExponentialDecay());
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.animation.FlingConfig defaultFlingConfig(kotlin.jvm.functions.Function1<? super java.lang.Float,androidx.compose.animation.core.TargetAnimation> adjustTarget = { return null });
    method public static void fling(androidx.compose.animation.core.AnimatedFloat, float startVelocity, androidx.compose.foundation.animation.FlingConfig config, kotlin.jvm.functions.Function3<? super androidx.compose.animation.core.AnimationEndReason,? super java.lang.Float,? super java.lang.Float,kotlin.Unit>? onAnimationEnd = null);
  }

}

package androidx.compose.foundation.gestures {

  public final class AndroidScrollableKt {
  }

  public final class DraggableKt {
    method public static androidx.compose.ui.Modifier draggable(androidx.compose.ui.Modifier, androidx.compose.ui.gesture.scrollorientationlocking.Orientation orientation, boolean enabled = true, boolean reverseDirection = false, androidx.compose.foundation.InteractionState? interactionState = null, boolean startDragImmediately = false, kotlin.jvm.functions.Function1<? super androidx.compose.ui.gesture.Direction,java.lang.Boolean> canDrag = { return enabled }, kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStarted = {}, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onDragStopped = {}, kotlin.jvm.functions.Function2<? super androidx.compose.ui.unit.Density,? super java.lang.Float,kotlin.Unit> onDrag);
  }

  public final class ScrollableController {
    ctor public ScrollableController(kotlin.jvm.functions.Function1<? super java.lang.Float,java.lang.Float> consumeScrollDelta, androidx.compose.foundation.animation.FlingConfig flingConfig, androidx.compose.animation.core.AnimationClockObservable animationClock);
    method public kotlin.jvm.functions.Function1<java.lang.Float,java.lang.Float> getConsumeScrollDelta();
    method public androidx.compose.foundation.animation.FlingConfig getFlingConfig();
    method public boolean isAnimationRunning();
    method public void smoothScrollBy(float value, androidx.compose.animation.core.AnimationSpec<java.lang.Float> spec = androidx.compose.animation.core.SpringSpec(), kotlin.jvm.functions.Function2<? super androidx.compose.animation.core.AnimationEndReason,? super java.lang.Float,kotlin.Unit> onEnd = { _, _ ->  });
    method public void stopAnimation();
    property public final boolean isAnimationRunning;
  }

  public final class ScrollableKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.ScrollableController rememberScrollableController(kotlin.jvm.functions.Function1<? super java.lang.Float,java.lang.Float> consumeScrollDelta);
    method public static androidx.compose.ui.Modifier scrollable(androidx.compose.ui.Modifier, androidx.compose.ui.gesture.scrollorientationlocking.Orientation orientation, androidx.compose.foundation.gestures.ScrollableController controller, boolean enabled = true, boolean reverseDirection = false, kotlin.jvm.functions.Function1<? super androidx.compose.ui.gesture.Direction,java.lang.Boolean> canScroll = { return enabled }, kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onScrollStarted = {}, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onScrollStopped = {});
  }

  public final class ZoomableController {
    ctor public ZoomableController(androidx.compose.animation.core.AnimationClockObservable animationClock, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onZoomDelta);
    method public kotlin.jvm.functions.Function1<java.lang.Float,kotlin.Unit> getOnZoomDelta();
    method public void smoothScaleBy(float value, androidx.compose.animation.core.AnimationSpec<java.lang.Float> spec = androidx.compose.animation.core.SpringSpec(Spring.StiffnessLow), kotlin.jvm.functions.Function2<? super androidx.compose.animation.core.AnimationEndReason,? super java.lang.Float,kotlin.Unit>? onEnd = null);
    method public void stopAnimation();
  }

  public final class ZoomableKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.foundation.gestures.ZoomableController rememberZoomableController(kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onZoomDelta);
    method public static androidx.compose.ui.Modifier zoomable(androidx.compose.ui.Modifier, androidx.compose.foundation.gestures.ZoomableController controller, boolean enabled = true, kotlin.jvm.functions.Function0<kotlin.Unit>? onZoomStarted = null, kotlin.jvm.functions.Function0<kotlin.Unit>? onZoomStopped = null);
    method public static androidx.compose.ui.Modifier zoomable(androidx.compose.ui.Modifier, boolean enabled = true, kotlin.jvm.functions.Function0<kotlin.Unit>? onZoomStarted = null, kotlin.jvm.functions.Function0<kotlin.Unit>? onZoomStopped = null, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onZoomDelta);
  }

}

package androidx.compose.foundation.lazy {

  @kotlin.RequiresOptIn(message="This is an experimental API for demonstrating how LazyColumn / LazyRow should work" + "using a DSL implementation. This is a prototype and its implementation is not suited" + " for PagedList or large lists.") public @interface ExperimentalLazyDsl {
  }

  public final class LazyDslKt {
    method @androidx.compose.foundation.lazy.ExperimentalLazyDsl @androidx.compose.runtime.Composable public static void LazyColumn(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = androidx.compose.foundation.layout.PaddingValues(0.dp), androidx.compose.ui.Alignment.Horizontal horizontalAlignment = Alignment.Start, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.LazyListScope,kotlin.Unit> content);
    method @androidx.compose.foundation.lazy.ExperimentalLazyDsl @androidx.compose.runtime.Composable public static void LazyRow(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = androidx.compose.foundation.layout.PaddingValues(0.dp), androidx.compose.ui.Alignment.Vertical verticalAlignment = Alignment.Top, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.LazyListScope,kotlin.Unit> content);
  }

  public final class LazyForKt {
    method @androidx.compose.runtime.Composable public static <T> void LazyColumnFor(java.util.List<? extends T> items, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = androidx.compose.foundation.layout.PaddingValues(0.dp), androidx.compose.ui.Alignment.Horizontal horizontalAlignment = Alignment.Start, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.LazyItemScope,? super T,kotlin.Unit> itemContent);
    method @androidx.compose.runtime.Composable public static <T> void LazyColumnForIndexed(java.util.List<? extends T> items, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = androidx.compose.foundation.layout.PaddingValues(0.dp), androidx.compose.ui.Alignment.Horizontal horizontalAlignment = Alignment.Start, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.LazyItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method @Deprecated @androidx.compose.runtime.Composable public static <T> void LazyColumnItems(java.util.List<? extends T> items, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = androidx.compose.foundation.layout.PaddingValues(0.dp), androidx.compose.ui.Alignment.Horizontal horizontalGravity = Alignment.Start, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> itemContent);
    method @androidx.compose.runtime.Composable public static <T> void LazyRowFor(java.util.List<? extends T> items, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = androidx.compose.foundation.layout.PaddingValues(0.dp), androidx.compose.ui.Alignment.Vertical verticalAlignment = Alignment.Top, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.LazyItemScope,? super T,kotlin.Unit> itemContent);
    method @androidx.compose.runtime.Composable public static <T> void LazyRowForIndexed(java.util.List<? extends T> items, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = androidx.compose.foundation.layout.PaddingValues(0.dp), androidx.compose.ui.Alignment.Vertical verticalAlignment = Alignment.Top, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.LazyItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
    method @Deprecated @androidx.compose.runtime.Composable public static <T> void LazyRowItems(java.util.List<? extends T> items, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = androidx.compose.foundation.layout.PaddingValues(0.dp), androidx.compose.ui.Alignment.Vertical verticalGravity = Alignment.Top, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> itemContent);
  }

  public final class LazyForStateKt {
  }

  @androidx.compose.runtime.Stable public interface LazyItemScope {
    method public androidx.compose.ui.Modifier fillParentMaxHeight(androidx.compose.ui.Modifier);
    method public androidx.compose.ui.Modifier fillParentMaxSize(androidx.compose.ui.Modifier);
    method public androidx.compose.ui.Modifier fillParentMaxWidth(androidx.compose.ui.Modifier);
  }

  public interface LazyListScope {
    method public void item(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.lazy.LazyItemScope,kotlin.Unit> content);
    method public <T> void items(java.util.List<? extends T> items, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.lazy.LazyItemScope,? super T,kotlin.Unit> itemContent);
    method public <T> void itemsIndexed(java.util.List<? extends T> items, kotlin.jvm.functions.Function3<? super androidx.compose.foundation.lazy.LazyItemScope,? super java.lang.Integer,? super T,kotlin.Unit> itemContent);
  }

}

package androidx.compose.foundation.selection {

  public final class SelectableKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.Modifier selectable(androidx.compose.ui.Modifier, boolean selected, boolean enabled = true, boolean inMutuallyExclusiveGroup = true, androidx.compose.foundation.InteractionState interactionState = remember({ 
    return <init>()
}), androidx.compose.foundation.Indication? indication = IndicationAmbient.invoke(), kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
  }

  public final class ToggleableKt {
    method public static androidx.compose.foundation.selection.ToggleableState ToggleableState(boolean value);
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.Modifier toggleable(androidx.compose.ui.Modifier, boolean value, boolean enabled = true, androidx.compose.foundation.InteractionState interactionState = remember({ 
    return <init>()
}), androidx.compose.foundation.Indication? indication = IndicationAmbient.invoke(), kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onValueChange);
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.Modifier triStateToggleable(androidx.compose.ui.Modifier, androidx.compose.foundation.selection.ToggleableState state, boolean enabled = true, androidx.compose.foundation.InteractionState interactionState = remember({ 
    return <init>()
}), androidx.compose.foundation.Indication? indication = IndicationAmbient.invoke(), kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
  }

  public enum ToggleableState {
    method public static androidx.compose.foundation.selection.ToggleableState valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.compose.foundation.selection.ToggleableState[] values();
    enum_constant public static final androidx.compose.foundation.selection.ToggleableState Indeterminate;
    enum_constant public static final androidx.compose.foundation.selection.ToggleableState Off;
    enum_constant public static final androidx.compose.foundation.selection.ToggleableState On;
  }

}

package androidx.compose.foundation.semantics {

  public final class FoundationSemanticsProperties {
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> getInMutuallyExclusiveGroup();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> getSelected();
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.foundation.selection.ToggleableState> getToggleableState();
    property public final androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> InMutuallyExclusiveGroup;
    property public final androidx.compose.ui.semantics.SemanticsPropertyKey<java.lang.Boolean> Selected;
    property public final androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.foundation.selection.ToggleableState> ToggleableState;
    field public static final androidx.compose.foundation.semantics.FoundationSemanticsProperties INSTANCE;
  }

  public final class FoundationSemanticsPropertiesKt {
    method public static boolean getInMutuallyExclusiveGroup(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static boolean getSelected(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static androidx.compose.foundation.selection.ToggleableState getToggleableState(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public static void setInMutuallyExclusiveGroup(androidx.compose.ui.semantics.SemanticsPropertyReceiver, boolean p);
    method public static void setSelected(androidx.compose.ui.semantics.SemanticsPropertyReceiver, boolean p);
    method public static void setToggleableState(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.foundation.selection.ToggleableState p);
  }

}

package androidx.compose.foundation.shape {

  public abstract class CornerBasedShape implements androidx.compose.ui.graphics.Shape {
    ctor public CornerBasedShape(androidx.compose.foundation.shape.CornerSize topLeft, androidx.compose.foundation.shape.CornerSize topRight, androidx.compose.foundation.shape.CornerSize bottomRight, androidx.compose.foundation.shape.CornerSize bottomLeft);
    method public abstract androidx.compose.foundation.shape.CornerBasedShape copy(androidx.compose.foundation.shape.CornerSize topLeft = topLeft, androidx.compose.foundation.shape.CornerSize topRight = topRight, androidx.compose.foundation.shape.CornerSize bottomRight = bottomRight, androidx.compose.foundation.shape.CornerSize bottomLeft = bottomLeft);
    method public final androidx.compose.foundation.shape.CornerBasedShape copy(androidx.compose.foundation.shape.CornerSize all);
    method public abstract androidx.compose.ui.graphics.Outline createOutline-hMawgr0(long size, float topLeft, float topRight, float bottomRight, float bottomLeft);
    method public final androidx.compose.ui.graphics.Outline createOutline-lwCvPpU(long size, androidx.compose.ui.unit.Density density);
    method public final androidx.compose.foundation.shape.CornerSize getBottomLeft();
    method public final androidx.compose.foundation.shape.CornerSize getBottomRight();
    method public final androidx.compose.foundation.shape.CornerSize getTopLeft();
    method public final androidx.compose.foundation.shape.CornerSize getTopRight();
  }

  @androidx.compose.runtime.Immutable public interface CornerSize {
    method public float toPx-lwCvPpU(long shapeSize, androidx.compose.ui.unit.Density density);
  }

  public final class CornerSizeKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.shape.CornerSize CornerSize(float size);
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.shape.CornerSize CornerSize(@IntRange(from=0, to=100) int percent);
    method @androidx.compose.runtime.Stable public static androidx.compose.foundation.shape.CornerSize CornerSize-0680j_4(float size);
    method public static androidx.compose.foundation.shape.CornerSize getZeroCornerSize();
  }

  public final class CutCornerShape extends androidx.compose.foundation.shape.CornerBasedShape {
    ctor public CutCornerShape(androidx.compose.foundation.shape.CornerSize topLeft, androidx.compose.foundation.shape.CornerSize topRight, androidx.compose.foundation.shape.CornerSize bottomRight, androidx.compose.foundation.shape.CornerSize bottomLeft);
    method public androidx.compose.foundation.shape.CutCornerShape copy(androidx.compose.foundation.shape.CornerSize topLeft, androidx.compose.foundation.shape.CornerSize topRight, androidx.compose.foundation.shape.CornerSize bottomRight, androidx.compose.foundation.shape.CornerSize bottomLeft);
    method public androidx.compose.ui.graphics.Outline createOutline-hMawgr0(long size, float topLeft, float topRight, float bottomRight, float bottomLeft);
  }

  public final class CutCornerShapeKt {
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(androidx.compose.foundation.shape.CornerSize corner);
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(float size);
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(int percent);
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(float topLeft = 0.0f, float topRight = 0.0f, float bottomRight = 0.0f, float bottomLeft = 0.0f);
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape(@IntRange(from=0, to=100) int topLeftPercent = 0, @IntRange(from=0, to=100) int topRightPercent = 0, @IntRange(from=0, to=100) int bottomRightPercent = 0, @IntRange(from=0, to=100) int bottomLeftPercent = 0);
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape-0680j_4(float size);
    method public static androidx.compose.foundation.shape.CutCornerShape CutCornerShape-ZmiikuI(float topLeft = 0.dp, float topRight = 0.dp, float bottomRight = 0.dp, float bottomLeft = 0.dp);
  }

  public final class GenericShape implements androidx.compose.ui.graphics.Shape {
    ctor public GenericShape(kotlin.jvm.functions.Function2<? super androidx.compose.ui.graphics.Path,? super androidx.compose.ui.geometry.Size,kotlin.Unit> builder);
    method public androidx.compose.foundation.shape.GenericShape copy(kotlin.jvm.functions.Function2<? super androidx.compose.ui.graphics.Path,? super androidx.compose.ui.geometry.Size,kotlin.Unit> builder);
    method public androidx.compose.ui.graphics.Outline createOutline-lwCvPpU(long size, androidx.compose.ui.unit.Density density);
  }

  public final class RoundedCornerShape extends androidx.compose.foundation.shape.CornerBasedShape {
    ctor public RoundedCornerShape(androidx.compose.foundation.shape.CornerSize topLeft, androidx.compose.foundation.shape.CornerSize topRight, androidx.compose.foundation.shape.CornerSize bottomRight, androidx.compose.foundation.shape.CornerSize bottomLeft);
    method public androidx.compose.foundation.shape.RoundedCornerShape copy(androidx.compose.foundation.shape.CornerSize topLeft, androidx.compose.foundation.shape.CornerSize topRight, androidx.compose.foundation.shape.CornerSize bottomRight, androidx.compose.foundation.shape.CornerSize bottomLeft);
    method public androidx.compose.ui.graphics.Outline createOutline-hMawgr0(long size, float topLeft, float topRight, float bottomRight, float bottomLeft);
  }

  public final class RoundedCornerShapeKt {
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(androidx.compose.foundation.shape.CornerSize corner);
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(float size);
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(int percent);
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(float topLeft = 0.0f, float topRight = 0.0f, float bottomRight = 0.0f, float bottomLeft = 0.0f);
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape(@IntRange(from=0, to=100) int topLeftPercent = 0, @IntRange(from=0, to=100) int topRightPercent = 0, @IntRange(from=0, to=100) int bottomRightPercent = 0, @IntRange(from=0, to=100) int bottomLeftPercent = 0);
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape-0680j_4(float size);
    method public static androidx.compose.foundation.shape.RoundedCornerShape RoundedCornerShape-ZmiikuI(float topLeft = 0.dp, float topRight = 0.dp, float bottomRight = 0.dp, float bottomLeft = 0.dp);
    method public static androidx.compose.foundation.shape.RoundedCornerShape getCircleShape();
  }

}

